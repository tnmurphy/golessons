#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <errno.h>


void * runFunction(void *varargp) {
    return NULL;
}

int main(int argc, char *argv[]) {
    int threadcount = 1;
 
    if (argc >1) {
        threadcount =atoi(argv[1]);
    }
    printf("cthreads: threadcount=%d\n", threadcount);
 
    pthread_t *thread_ids = calloc(threadcount, sizeof(pthread_t));
 
    for (int i = 0; i < threadcount; i++) {

        int err = pthread_create(&thread_ids[i], NULL, runFunction, NULL);

	if (err == EAGAIN) {
		printf("cthreads: reached thread limit at %d\n", i);
		threadcount = i - 1;
	} else if (err != 0) {
		printf("cthreads: some unknown error at %d\n", i);
		return 1;
	}
    }
    for (int i = 0; i < threadcount; i++) {
        pthread_join(thread_ids[i], NULL);
    }
    return 0;
}
